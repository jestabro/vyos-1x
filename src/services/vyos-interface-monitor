#!/usr/bin/env python3

import logging
import signal
import pyudev
import netaddr
import time

debug = True

logger = logging.getLogger(__name__)
logs_handler = logging.StreamHandler()
logger.addHandler(logs_handler)

config_file = '/opt/vyatta/etc/config/config.boot'

if debug:
    logger.setLevel(logging.DEBUG)
else:
    logger.setLevel(logging.INFO)

class MacAddr:
    mac_mapping = {}
    def __init__(self, numerical):
        self.mac = netaddr.EUI(numerical)

    def is_multicast(self):
        return bool(self.mac.words[0] & 0b01)

    def is_locally_administered(self):
        return bool(self.mac.words[0] & 0b10)

    def is_on_passlist(self):
        # not yet implemented; need to confirm wl from vyatta_interface_rescan
        return False

    @classmethod
    def update(cls, mac, intf):
        cls.mac_mapping[mac[-12:]] = intf

def rationalize():
    pass

def update_boot():
    from vyos.configtree import ConfigTree, ConfigTreeError

    config_tree = ConfigTree(config_file)

    print(f"JSE mac_mapping {MacAddr.mac_mapping}")

    for mac, intf in MacAddr.mac_mapping.items():
        config_tree.set(['interfaces', 'ethernet', intf, 'hw-id'], value=mac)

def initialize(context):
    for device in context.list_devices(subsystem='net'):
        mac = None
        intf = None
        logger.info(f"JSE device: {device}")
        if 'ID_NET_NAME_MAC' in device.properties:
            mac = device.properties['ID_NET_NAME_MAC']
        if 'INTERFACE' in device.properties:
            intf = device.properties['INTERFACE']
        logger.info(f"JSE device: mac {mac} interface {intf}")
        if mac:
            MacAddr.update(mac, intf)

    update_boot()

def eth_update(device):
    logger.info(f"JSE eth action {device.action} device {device}")
    logger.info(f"JSE in eth_update, mac_mapping {MacAddr.mac_mapping}")

def wlan_update(device):
    logger.info(f"JSE wlan action {device.action} device {device}")


def main():
    context = pyudev.Context()

    initialize(context)

    monitor = pyudev.Monitor.from_netlink(context)
    monitor.filter_by('net')
    def log_event(device):
        logger.info(f"JSE in log_event, device is {device}")
        if 'INTERFACE' in device.properties and 'eth' in device.properties['INTERFACE']:
            eth_update(device)
        else:
            logger.info(f"JSE sanity: device.properties['INTERFACE'] {device.properties['INTERFACE']}")
        if 'INTERFACE' in device.properties and 'wlan' in device.properties['INTERFACE']:
            wlan_update(device)
        else:
            logger.info(f"JSE sanity: device.properties['INTERFACE'] {device.properties['INTERFACE']}")

    def sig_handler(signum, frame):
        observer.stop()
        raise KeyboardInterrupt

    signal.signal(signal.SIGTERM, sig_handler)

    observer = pyudev.MonitorObserver(monitor, callback=log_event)
    observer.start()

    while True:
        try:
            pass
#            logger.info(f"JSE eth_num is {eth_num}")
#            time.sleep(1)
        except KeyboardInterrupt:
            logger.info(f"JSE exiting")
            break

if __name__ == '__main__':
    main()
