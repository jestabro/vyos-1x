#!/usr/bin/env python3

import os
import logging
import signal
import pyudev
import netaddr
import time

debug = True

logger = logging.getLogger(__name__)
logs_handler = logging.StreamHandler()
logger.addHandler(logs_handler)

config_path = '/opt/vyatta/etc/config/config.boot'
config_status = '/tmp/vyos-config-status'

tmp_interface_mapping = '/run/vyos-interface-mapping'
interface_mapping = '/opt/vyatta/etc/config/vyos-interface-mapping'

if debug:
    logger.setLevel(logging.DEBUG)
else:
    logger.setLevel(logging.INFO)

class MacAddr:
    mac_mapping = {}
    netaddr.mac_eui48.word_sep=':'
    def __init__(self, numerical):
        self.mac = netaddr.EUI(numerical)

    def is_multicast(self):
        return bool(self.mac.words[0] & 0b01)

    def is_locally_administered(self):
        return bool(self.mac.words[0] & 0b10)

    def is_on_passlist(self):
        # not yet implemented; need to confirm wl from vyatta_interface_rescan
        return False

    @classmethod
    def update(cls, mac, intf):
        if mac and intf:
            cls.mac_mapping[mac] = intf

def boot_configuration_complete():
    if os.path.isfile(config_status):
        return True
    return False

def load_config(config_path):
    session = ConfigSession()
    session.load(config_path)
    session.commit()

def get_wireless_physical_device(intf):
    if 'wlan' not in intf:
        return None
    tmp = os.readlink(f'/sys/class/net/{intf}/phy80211')
    phy = os.path.basename(tmp)
    print(f"JSE wireless phy is {phy}")
    return phy

def rationalize(stable: dict, proposed: dict):
    check_keys = set(stable) & set(proposed)
    for k in check_keys:
        if stable[k] != proposed[k]:
            pass

    return

def update_boot():
    from vyos.configtree import ConfigTree, ConfigTreeError

    with open(config_path) as f:
        config_file = f.read()

    config_tree = ConfigTree(config_file)

    print(f"JSE mac_mapping {MacAddr.mac_mapping}")

    for mac, intf in MacAddr.mac_mapping.items():
        if 'eth' in intf:
            config_tree.set(['interfaces', 'ethernet', intf, 'hw-id'], value=mac)
        if 'wlan' in intf:
            phy = get_wireless_physical_device(intf)
            if phy:
                config_tree.set(['interfaces', 'wireless', intf, 'physical-device'], value=phy)

    try:
        with open(config_path, 'w') as f:
            f.write(config_tree.to_string())
        print("JSE wrote config")
    except OSError as e:
        print("JSE OSError {e}")

def update_live():
    pass

def initialize(context):
    for device in context.list_devices(subsystem='net'):
        mac = None
        intf = None
        logger.info(f"JSE device: {device}")
        if 'ID_NET_NAME_MAC' in device.properties:
            mac = device.properties['ID_NET_NAME_MAC']
        if 'INTERFACE' in device.properties:
            intf = device.properties['INTERFACE']
        logger.info(f"JSE device: mac {mac} interface {intf}")
        if mac:
            mac = mac[-12:]
            mac = ':'.join(mac[i:i+2] for i in range(0, 12, 2))                
            MacAddr.update(mac, intf)

#    update_boot()

def eth_update(device):
    logger.info(f"JSE eth action {device.action} device {device}")
    logger.info(f"JSE in eth_update, mac_mapping {MacAddr.mac_mapping}")

def wlan_update(device):
    logger.info(f"JSE wlan action {device.action} device {device}")


def main():
    context = pyudev.Context()

    initialize(context)

    monitor = pyudev.Monitor.from_netlink(context)
    monitor.filter_by('net')
    def interface_event(device):
        logger.info(f"JSE in log_event, device is {device}")
        if 'INTERFACE' in device.properties and 'eth' in device.properties['INTERFACE']:
            eth_update(device)
        else:
            logger.info(f"JSE sanity: device.properties['INTERFACE'] {device.properties['INTERFACE']}")
        if 'INTERFACE' in device.properties and 'wlan' in device.properties['INTERFACE']:
            wlan_update(device)
        else:
            logger.info(f"JSE sanity: device.properties['INTERFACE'] {device.properties['INTERFACE']}")

    def sig_handler(signum, frame):
        observer.stop()
        raise KeyboardInterrupt

    signal.signal(signal.SIGTERM, sig_handler)

    observer = pyudev.MonitorObserver(monitor, callback=interface_event)
    observer.start()

#    while True:
#        if os.path.isfile(config_status):
#            # mv file
#            break
#        time.sleep(2)

    observer.join()

#    while True:
#        try:
#            pass
#            logger.info(f"JSE eth_num is {eth_num}")
#            time.sleep(1)
#        except KeyboardInterrupt:
#            logger.info(f"JSE exiting")
#            break

if __name__ == '__main__':
    main()
