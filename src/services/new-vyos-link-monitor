#!/usr/bin/env python3
#
# Copyright (C) 2021 VyOS maintainers and contributors
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License version 2 or later as
# published by the Free Software Foundation.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
#

import os
import sys
import time
import socket
import logging
from types import SimpleNamespace

import vyos.cy_netlink as nl

debug = True

logger = logging.getLogger(__name__)
logs_handler = logging.StreamHandler()
logger.addHandler(logs_handler)

if debug:
    logger.setLevel(logging.DEBUG)
else:
    logger.setLevel(logging.INFO)

def parse_rtattr(rta: dict, max_enum: int, leng: int) -> dict: 
    sn = SimpleNamespace()
    sn.len = leng
    d = {}

    while nl.rta_ok(rta, sn.len):
        if rta['rta_type'] <= max_enum:
            d['rta_type'] = rta
        rta = nl.rta_next(rta, sn.len)

    return d

def nl_listen():
    #try
    s = socket.socket(socket.AF_NETLINK, socket.SOCK_RAW, socket.NETLINK_ROUTE)
    s.bind((os.getpid(), nl.RTMGRP_LINK))

    while True:
        data: bytes = s.recv(65535)
        # check length ?
        status: int = len(data)

        nlh = nl.get_header(data)
        siz = nl.get_sizeof_header(nlh)
#        nlmsg_hdrlen = nl.get_nlmsg_hdrlen()
        nlmsg_hdrlen = nl.NLMSG_HDRLEN
        print(f"sizeof nlmsg header is {siz}")
        print(f"nlmsg_hdrlen is {nlmsg_hdrlen}")
        print(f"status is {status}")

        while status > nlmsg_hdrlen:
            print(f"JSE what is nlh in Python ? Type: {type(nlh)}")
            msg_type: int = nlh['nlmsg_type']
            msg_len: int = nlh['nlmsg_len']
            save_len: int = msg_len

            # do things
            print("JSE doing things")
            # get iffinfomsg
            # parse ifinfomsg as rtattr ?
            # record ifUp and ifRun
            #
            # get ifaddrmsg
            # parse ifaddrmsg as rtattr ?
            # get addr

            status -= nl.nlmsg_align(save_len)
            data = data[nl.nlmsg_align(save_len):]
            if len(data) > nlmsg_hdrlen:
                nlh = nl.get_header(data)

def main():
    nl_listen()

if __name__ == '__main__':
    main()
