#!/usr/bin/env python3
#
# Copyright (C) 2021 VyOS maintainers and contributors
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License version 2 or later as
# published by the Free Software Foundation.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
#

import os
import sys
import time
import socket
import logging
from types import SimpleNamespace

import vyos.cy_netlink as nl

debug = True

logger = logging.getLogger(__name__)
logs_handler = logging.StreamHandler()
logger.addHandler(logs_handler)

if debug:
    logger.setLevel(logging.DEBUG)
else:
    logger.setLevel(logging.INFO)

def parse_rtattr(buf: bytes, leng: int) -> dict:
    attrs = {}
    remaining = leng
    while remaining:
        attr = nl.get_rtattr(buf)
        if not nl.rta_ok(attr, remaining):
            break

        rta_type = attr['rta_type']
        rta_len = attr['rta_len']
        rta_align = nl.rta_align(rta_len)

        print(f"JSE rta_type {rta_type}")
        attrs[rta_type] = buf[:rta_align]
        print(f"JSE attrs: {attrs}")

        remaining -= rta_align
        buf = buf[rta_align:]

        logger.debug(f"remaining: {remaining}")

    return attrs

def nl_receive():
    try:
        s = socket.socket(socket.AF_NETLINK, socket.SOCK_RAW, socket.NETLINK_ROUTE)
        s.bind((os.getpid(), nl.RTMGRP_LINK))
    except OSError as e:
        logger.critical(f"OSError {e}")

    while True:
        data: bytes = s.recv(65535)
        status: int = len(data)
        nlmsg_hdrlen: int = nl.NLMSG_HDRLEN

        while status >= nlmsg_hdrlen:
            nlh: nl.nlmsghdr = nl.get_header(data)
            nlmsg_type: int = nlh['nlmsg_type']
            nlmsg_len: int = nlh['nlmsg_len']
            save_len: int = nlmsg_len

            if nlmsg_type in (nl.RTM_NEWROUTE, nl.RTM_DELROUTE):
                logger.info("Change to routing table")
            else:
                tmp_data = nl.Nlmsg_Data(data)
                print(f"JSE tmp_data: {tmp_data}")
                print(f"JSE data[16:]: {data[16:]}")
                ifi_type, ifi_index, ifi_flags, ifi_change = nl.get_ifinfomsg(data[16:])
                logger.debug(f"ifi_type: {ifi_type}, ifi_index: {ifi_index}, ifi_flags: {ifi_flags}, ifi_change: {ifi_change}")

#                tmp_data = nl.ifla_rta(tmp_data)

                attr_dict = parse_rtattr(data[32:], nlmsg_len - 32)

                print(f"JSE nl.IFLA_IFNAME: {nl.IFLA_IFNAME}; attr_dict keys: {list(attr_dict)}")

                if nl.IFLA_IFNAME in list(attr_dict):
                    ifname = attr_dict[nl.IFLA_IFNAME].decode()
                    print(f"JSE ifname: {ifname}")

                step = nl.nlmsg_align(save_len)
                status -= step

                data = data[step:]
#                if len(data) > nlmsg_hdrlen:
#                    nlh = nl.get_header(data)

def main():
    nl_receive()

if __name__ == '__main__':
    main()
