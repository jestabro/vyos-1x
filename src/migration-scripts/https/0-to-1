#!/usr/bin/env python3
#
# Copyright (C) 2020 VyOS maintainers and contributors
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License version 2 or later as
# published by the Free Software Foundation.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

# * remove "system login user <user> group" node, Why should be add a user to a
#   3rd party group when the system is fully managed by CLI?
# * remove "system login user <user> level" node
#   This is the only privilege level left and also the default, what is the
#   sense in keeping this orphaned node?

import sys

from vyos.configtree import ConfigTree

if (len(sys.argv) < 2):
    print("Must specify file name!")
    sys.exit(1)

file_name = sys.argv[1]

with open(file_name, 'r') as f:
    config_file = f.read()

config = ConfigTree(config_file)

old_base = ['service', 'https', 'listen-address']
if not config.exists(old_base):
    # Nothing to do
    sys.exit(0)
else:
    new_base = ['service', 'https', 'virtual-host']
    config.set(new_base)
    config.set_tag(new_base)

    index = 0
    for addr in config.list_nodes(old_base):
        tag_name = f'vhost{index}'
        config.set(new_base + [tag_name])
        config.set(new_base + [tag_name, 'listen-address'], value=addr)

        if config.exists(old_base + [addr, 'listen-port']):
            port = config.return_value(old_base + [addr, 'listen-port'])
            config.set(new_base + [tag_name, 'listen-port'], value=port)

        if config.exists(old_base + [addr, 'server-name']):
            names = config.return_values(old_base + [addr, 'server-name'])
            for name in names:
                config.set(new_base + [tag_name, 'server-name'], value=name,
                           replace=False)

        index += 1

    config.delete(old_base)

    try:
        with open(file_name, 'w') as f:
            f.write(config.to_string())
    except OSError as e:
        print("Failed to save the modified config: {}".format(e))
        sys.exit(1)
