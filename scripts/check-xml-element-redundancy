#!/usr/bin/env python3
#
# check-xml-element-redundancy: check for redundant (node | tagNode | leafNode)
#
# Copyright (C) 2021 VyOS maintainers and contributors
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License version 2 or later as
# published by the Free Software Foundation.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
#

import glob
import logging
from lxml import etree

debug = False

logger = logging.getLogger(__name__)
logs_handler = logging.StreamHandler()
logger.addHandler(logs_handler)

if debug:
    logger.setLevel(logging.DEBUG)
else:
    logger.setLevel(logging.INFO)

def check_content(l: list, fname: str):
    first = etree.tostring(l[0][0], encoding='unicode')
    for el in l[1:]:
        second = etree.tostring(el[0], encoding='unicode')
        if (first != second):
            logger.info(f'Differing content for elements {el[0].get("name")} at path {el[1]} in file {fname}')
            break
        else:
            logger.info(f'Multiple instances of element with same content.')

def main():
    for fname in glob.glob('build/interface-definitions/*.xml'):
        tree = etree.parse(fname)
        root = tree.getroot()
        defv = {}

        xpath_str = f'//node | //tagNode | //leafNode'
        xp = tree.xpath(xpath_str)

        for element in xp:
            ap = element.xpath('ancestor::*[@name]')
            ap_name = list(map(lambda e: e.get("name"), ap))
            defv.setdefault((element.get("name"), str(ap)), []).append((element, ap_name))

        for k, v in defv.items():
            if len(v) > 1:
                logger.debug(f'redundancy for {k[0]}')
                check_content(v, fname)

if __name__ == '__main__':
    main()
