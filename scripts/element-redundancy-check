#!/usr/bin/env python3

import glob
from lxml import etree

def read_node(n, tree, record):
    name = n.get("name")
    print(f'name is {name}')
    node_type = n.tag
    depth = len(tree.getelementpath(n).split('/'))
    xpath_str = f'//node[@name="{name}"]'
#    print(f'xpath_str: {xpath_str}')
    p = tree.xpath(xpath_str)
    print(f'tree.xpath is {p}')
    for path in p:
        ap = path.xpath('ancestor::*[@name]')
        print(f"ancestor path: {ap}")
    
    if node_type in ("node", "tagNode"):
        record.setdefault(depth, []).append(name)
    if name == 'radius':
        print(f'radius node: {n}')

    children = n.find("children")
    if node_type in ("node", "tagNode"):
        inner_nodes = children.iterfind("*")
        for inner_n in inner_nodes:
            read_node(inner_n, tree, record)

def report_redundancy(fname, record):
    for k, v in record.items():
        for el in set(v):
            num = v.count(el)
            if num > 1:
                print(f'element {el} appears {num} times at depth {k} in {fname}')

def main():
#    for fname in glob.glob('build/interface-definitions/*.xml'):
    for fname in ['build/interface-definitions/system-login.xml']:
        tree = etree.parse(fname)
        root = tree.getroot()

        record = {}

        for n in root.findall('*'):
            if n.tag == "syntaxVersion":
                continue
            read_node(n, tree, record)

        report_redundancy(fname, record)

if __name__ == '__main__':
    main()
